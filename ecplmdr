#! /bin/sh --

""":" # ecplmdr: copy encrypted data to a new computer using manual file copy
#
# This is free software, GNU GPL >=2.0. There is NO WARRANTY. Use at your risk.
#
# Start the receiver first. The default receive locations (DIR) are any
# writable mounted filesystems within /media/ .
#
# To receive, mount your USB pen drive to DIR, and run any of:
#
#   $ sh ecplmdr receive --in DIR >OUT
#   $ sh ecplmdr receive >OUT
#   $ wget -qO- https://github.com/pts/copystrap/raw/master/ecplmdr | sh >OUT
#   $ curl -Ls  https://github.com/pts/copystrap/raw/master/ecplmdr | sh >OUT
#   $ busybox wget -qO- https://github.com/pts/ecplmdr/raw/master/ecplmdr | busybox sh >OUT
#
# To send, move the USB pen drive to the sender, mount it to DIR, and run any of:
#
#   $ sh ecplmdr send FILENAME
#   $ sh ecplmdr send --in DIR FILENAME
#
# This file is a magic script: it works as `sh ecplmdr ...' (recommended),
# `python ecplmdr ...' and `cat ecplmdr | sh'.
#

if true; then  # Read entire shell script before running it.
test "$ZSH_VERSION" && builtin setopt shwordsplit 2>/dev/null
unset PYCODE PYTHON DK TARGET ARGV0 CMD  # Prevent accidental export.
ARGV0="$0"
CMD=
if test "${0%lmdr}" = "$0" && test $# = 0; then  # wget -qO- .../ecplmdr | sh
  # Dash and busybox sh don't support this:
  # test -z "$BASH_SOURCE" && test -z "$ZSH_SCRIPT"
  # This is for interactive SSH in `curl ... | sh'
  ARGV0=ecplmdr
  CMD=receive
fi
PYCODE='import base64, hashlib, os, struct, sys, ssl; ssl.wrap_socket; print base64.b64encode(hashlib.sha256(struct.pack(">H", int(os.getenv("HK")))).digest().encode("hex").upper().decode("hex"))'
PYTHON=
for PYTHON in python python2 python2.7 python2.6 python2.5 python2.4; do
  TARGET="$(HK=26740 "$PYTHON" -c "$PYCODE" 2>/dev/null)"
  test "$?" = 0 && test "$TARGET" = cS3VjiKwvKBA/JJQA4+Egn+FWTq5eOWW7XWzuki9GyM= && break
  PYTHON=
done
if test -z "$PYTHON"; then
  echo "ecplmdr: fatal: working Python 2 not found" >&2
  exit 2
fi
# TODO(pts): Make the Python script shorter, to make it fit to the environment.
# The Python script below must not contain the character '
export PYCODE='#"""

import base64
import hashlib
import os
import os.path
import re
import socket
import struct
import sys

# --- Curve25519 key exchange.


def curve25519_scalarmult(n, p=None):
  """Curve25519 key exchange (curve25519-donna).

  Implementation based on
  https://github.com/pts/py_ssh_keygen_ed25519/blob/master/curve25519_compact.py
  """
  # n is a group element string, p is a string representing an integer. Both
  # are 32 bytes.
  if len(n) != 32:
    raise ValueError("Invalid Curve25519 n.")
  if p is None:
    u = 9
  else:
    if len(p) != 32:
      raise ValueError("Invalid Curve25519 p.")
    u = int(p[::-1].encode("hex"), 16)
  k = (int(n[::-1].encode("hex"), 16) & ~(1 << 255 | 7)) | 1 << 254
  ql, x1, x2, z2, x3, z3, do_swap = (1 << 255) - 19, u, 1, 0, u, 1, 0
  for t in xrange(254, -1, -1):
    kt = (k >> t) & 1
    if do_swap ^ kt:
      x2, x3, z2, z3 = x3, x2, z3, z2
    do_swap = kt
    a, b = (x2 + z2) % ql, (x2 - z2) % ql
    aa, bb = (a * a) % ql, (b * b) % ql
    c, d = (x3 + z3) % ql, (x3 - z3) % ql
    da, cb = d * a % ql, c * b % ql
    d1, d2 = da + cb, da - cb
    x3, z3 = d1 * d1 % ql, x1 * d2 * d2 % ql
    x2, e = aa * bb % ql, (aa - bb) % ql
    z2 = e * (aa + 121665 * e) % ql
  if do_swap:
    x2, x3, z2, z3 = x3, x2, z3, z2
  return ("%064x" % ((x2 * pow(z2, ql - 2, ql)) % ql)).decode("hex")[::-1]


# --- Digest.


def digest32(data):
  """Returns a 32-byte message digest."""
  return hashlib.sha256(data).digest()


# --- ChaCha20 symmetric cipher implementation.


def yield_chacha20_xor_stream(key, iv, position=0):
  """Generate the xor stream with the ChaCha20 cipher."""
  if not isinstance(position, (int, long)):
    raise TypeError
  if position & ~0xffffffff:
    raise ValueError("Position is not uint32.")
  if not isinstance(key, str):
    raise TypeError
  if not isinstance(iv, str):
    raise TypeError
  if len(key) != 32:
    raise ValueError
  if len(iv) != 8:
    raise ValueError

  def rotate(v, c):
    return ((v << c) & 0xffffffff) | v >> (32 - c)

  def quarter_round(x, a, b, c, d):
    x[a] = (x[a] + x[b]) & 0xffffffff
    x[d] = rotate(x[d] ^ x[a], 16)
    x[c] = (x[c] + x[d]) & 0xffffffff
    x[b] = rotate(x[b] ^ x[c], 12)
    x[a] = (x[a] + x[b]) & 0xffffffff
    x[d] = rotate(x[d] ^ x[a], 8)
    x[c] = (x[c] + x[d]) & 0xffffffff
    x[b] = rotate(x[b] ^ x[c], 7)

  ctx = [0] * 16
  ctx[:4] = (1634760805, 857760878, 2036477234, 1797285236)
  ctx[4 : 12] = struct.unpack("<8L", key)
  ctx[12] = ctx[13] = position
  ctx[14 : 16] = struct.unpack("<LL", iv)
  while 1:
    x = list(ctx)
    for i in xrange(10):
      quarter_round(x, 0, 4,  8, 12)
      quarter_round(x, 1, 5,  9, 13)
      quarter_round(x, 2, 6, 10, 14)
      quarter_round(x, 3, 7, 11, 15)
      quarter_round(x, 0, 5, 10, 15)
      quarter_round(x, 1, 6, 11, 12)
      quarter_round(x, 2, 7,  8, 13)
      quarter_round(x, 3, 4,  9, 14)
    for c in struct.pack("<16L", *(
        (x[i] + ctx[i]) & 0xffffffff for i in xrange(16))):
      yield ord(c)
    ctx[12] = (ctx[12] + 1) & 0xffffffff
    if ctx[12] == 0:
      ctx[13] = (ctx[13] + 1) & 0xffffffff


def chacha20_encrypt(data, key, iv=None, position=0):
  """Encrypt (or decrypt) with the ChaCha20 cipher.

  Based on: https://github.com/pts/chacha20/blob/master/chacha20.py
  """
  if not isinstance(data, str):
    raise TypeError
  if iv is None:
    iv = "\0" * 8
  if isinstance(key, str):
    if not key:
      raise ValueError("Key is empty.")
    if len(key) < 32:
      # TODO(pts): Do key derivation with PBKDF2 or something similar.
      key = (key * (32 / len(key) + 1))[:32]
    if len(key) > 32:
      raise ValueError("Key too long.")

  def yield_chars(data, it):
    for i in data:
      yield chr(ord(i) ^ it.next())

  return "".join(yield_chars(
      data, yield_chacha20_xor_stream(key, iv, position)))


assert chacha20_encrypt(
    "Hello World", "chacha20!") == "\xeb\xe78\xad\xd5\xab\x18R\xe2O~"
assert chacha20_encrypt(
    "\xeb\xe78\xad\xd5\xab\x18R\xe2O~", "chacha20!") == "Hello World"


# ---


def urandom(n):
  """Return a string of n random bytes."""
  import random
  rr = random.randrange
  return "".join(chr(rr(256)) for _ in xrange(n))


try:
  if len(os.urandom(3)) == 3:
    urandom = os.urandom  # Faster and higher quality.
except (AttributeError, OSError, IOError, ValueError):
  pass

# ---

msgin, msgout = sys.stdin, sys.stderr

def init_msg_tty():
  global msgin, msgout
  if msgin is msgout:  # Already set.
    return
  try:
    msgout2 = open("/dev/tty", "r+")
  except IOError:
    return
  msgin = msgout = msgout2


def prompt_read_line(prompt):
  msgout.write(prompt)
  msgout.flush()
  line = msgin.readline()
  if not line:
    msgout.write("\n")
    msgout.flush()
    raise EOFError("EOF when reading reply to prompt.")
  return line.rstrip("\r\n")


SEND_DATA_RE = re.compile("SPK=([a-zA-Z0-9+/]{43}=)\n\n")


class UsageError(ValueError):
  """Raised when problem in argv."""


class FatalError(ValueError):
  """Raised on a fatal error which does not need a traceback."""


def get_usage(argv0):
  return (
      "ecplmdr: copy encrypted data to a new computer using manual file copy\n"
      "This is free software, GNU GPL >=2.0. There is NO WARRANTY. Use at your risk.\n"
      "Usage: %s send [--in <dir>] [<filename>]\n"
      "       %s receive [--in <dir]> > <filename>\n"
      ).replace("%s", argv0)


ECP_FN_RE = re.compile("ecp[.]([0-9a-f]{64})[.]ecp\Z")


def main(argv):
  argv0 = (argv or ("ecplmdr",))[0]
  indir = None
  if len(argv) > 1 and argv[1].startswith("--argv0="):
    argv0 = argv.pop(1).split("=", 1)[1]
  if len(argv) < 2 or argv[1] in ("help", "--help"):
    sys.stderr.write(get_usage(argv0))
  elif argv[1] in ("receive", "recv"):
    init_msg_tty()
    if len(argv) > 3 and argv[2] == "--in":
      indir = argv[3]
      del argv[2 : 4]
    if len(argv) > 2:
      raise UsageError("too many command-line arguments")
    recv_private = urandom(32)
    recv_public =  curve25519_scalarmult(recv_private)
    fn = "ecp.%s.ecp" % recv_public.encode("hex")
    pns = []
    if indir is None:
      f = open("/proc/mounts")  # Linux: Debian, Ubuntu.
      try:
        mount_lines = f.readlines()
      finally:
        f.close()
      for line in mount_lines:
        line = line.rstrip("\n").split(" ")
        if len(line) > 2 and line[1].startswith("/media/"):
          pns.append(os.path.join(line[1], fn))
    else:
      pns.append(os.path.join(indir, fn))
    has_ok = False
    files_to_remove = []
    try:
      for pn in pns:
        is_ok = True
        try:
          open(pn, "wb").close()  # Create empty file.
        except (IOError, OSError), e:
          is_ok = False
          print >>msgout, "ecplmdr: warning: could not create receive file: %s" % e
        if is_ok:
          files_to_remove.append(pn)
          print >>msgout, "ecplmdr: created receive file: %s" % pn
          has_ok = True
      if not has_ok:
        if indir is None:
          advice = "Insert a USB pen drive and mount it, and specify: ecplmdr receive --in DIR"
        else:
          # TODO(pts): pipes.quote(indir).
          advice = "Make sure the directory %s is writable or rerun as root: sudo ecplmdr receive --in %s" % indir
        raise FatalError("Could not create any of the receive files. %s" % advice)
      cont_msg = "umount the USB pen drive, move the USB pen drive to the sender, start `ecplmdr send\x27 on the sender, move the USB pen drive back here, mount the USB pen drive to here"
      print >>msgout, "ecplmdr: info: %s" % cont_msg
      while 1:
        try:
          pnpr = prompt_read_line("ecplmdr: Press <Enter> to use any of the receive .ecp files above: ")
        except EOFError, e:
          raise FatalError(str(e))
        if pnpr:
          spns = [pnpr]
        else:
          spns = pns[:]
        has_error = has_empty = False
        data = None
        for pn in spns:
          data = None
          try:
            f = open(pn, "rb")
            try:
              data = f.read()
            finally:
              f.close()
          except (IOError, OSError), e:
            print >>msgout, "ecmlmdr: error reading receive file: %s" % pn
            has_error = True
          if data == "":
            print >>msgout, "ecmlmdr: receive file is empty: %s" % pn
            has_empty = True
          if data:
            break
        if has_error:
          if pnpr:
            print >>msgout, "ecplmdr: info: please specify an .ecp filename which is readable"
          else:
            print >>msgout, "ecplmdr: info: please mount the USB pen drive again to the same location, or specify an .ecp filename"
        if has_empty:
          print >>msgout, "ecplmdr: info: %s" % cont_msg
        if data:
          break
      match = SEND_DATA_RE.match(data)
      if not match:
        raise ValueError("Invalid send_data.")
      send_public2 = base64.b64decode(match.group(1))
      data_encrypted2 = data[match.end():]
      if len(data_encrypted2) < 32:
        raise ValueError("Encrypted data too short.")
      key2 = curve25519_scalarmult(recv_private, send_public2)
      data2 = chacha20_encrypt(data_encrypted2, key2)
      print >>msgout, "ecplmdr: received %d bytes of data" % (
          len(data2) - 32)
      data3 = data2[32:]
      if digest32(data3) != data2[:32]:
        raise ValueError("Corrupt data: digest does not match.")
      sys.stdout.write(data3)
      sys.stdout.flush()
    finally:
      for fn in files_to_remove:
        try:
          os.remove(fn)
        except OSError:
          pass
  elif argv[1] == "send":
    init_msg_tty()
    if len(argv) > 3 and argv[2] == "--in":
      indir = argv[3]
      del argv[2 : 4]
    if len(argv) > 3:
      raise UsageError("too many command-line arguments")
    if len(argv) == 3:
      inf = open(argv[2], "rb")
    else:
      inf = sys.stdin
    try:
      mount_dirs = []
      if indir is None:
        f = open("/proc/mounts")  # Linux: Debian, Ubuntu.
        try:
          mount_lines = f.readlines()
        finally:
          f.close()
        for line in mount_lines:
          line = line.rstrip("\n").split(" ")
          if len(line) > 2 and line[1].startswith("/media/"):
            mount_dirs.append(line[1])
      else:
        mount_dirs.append(indir)
      pns = []
      for mount_dir in mount_dirs:
        try:
          for fn in os.listdir(mount_dir):
            if ECP_FN_RE.match(fn):
              pn = os.path.join(mount_dir, fn)
              if os.path.isfile(pn):
                pns.append(pn)
        except OSError:
          pass
      if not pns:
        raise FatalError("No .ecp files not found. First mount the USB pen drive on the sender, start `ecplmdr receive\x27 there, and follow the instructions there.")
      if inf is sys.stdin and os.isatty(sys.stdin.fileno()):
        print >>msgout, "ecplmdr: reading data from stdin..."
      data = inf.read()
    finally:
      if inf is not sys.stdin:
        inf.close()
    has_ok = False
    for pn in pns:
      match = ECP_FN_RE.match(os.path.basename(pn))
      if not match:
        raise AssertionError("Not an .ecp filename: %s" % pn)
      recv_public2 = match.group(1).decode("hex")
      try:
        f = open(pn, "rb+")
        try:
          data1 = f.read(1)
          f.seek(0)
          if data1:
            print >>msgout, "ecplmdr: info: .ecp file not empty, ignoring: %s" % pn
          else:
            send_private = urandom(32)
            send_public =  curve25519_scalarmult(send_private)
            key = curve25519_scalarmult(send_private, recv_public2)
            data_encrypted = chacha20_encrypt(digest32(data) + data, key)
            send_data = "SPK=%s\n\n%s" % (base64.b64encode(send_public), data_encrypted)
            print >>msgout, "ecplmdr: writing %d bytes of data (%d bytes in total) to %s" % (len(data), len(send_data), pn)
            f.write(send_data)
            has_ok = True
        finally:
          f.close()
      except (OSError, IOError), e:
        print >>msgout, "ecplmdr: error reading or writing .ecp file: %s" % e
    if has_ok:
      print >>msgout, "ecplmdr: send OK, umount the USB pen drive, move it to the receiver, mount the USB pen drive in the receiver, and continue there"
    else:
      raise FatalError("Send failed: could not write any of the .ecp files.")
  else:
    raise UsageError("unknown command: %s" % argv[1])


if __name__ == "__main__":
  try:
    sys.exit(main(sys.argv))
  except UsageError, e:
    print >>msgout, "ecplmdr: usage error: %s" % e
    sys.exit(1)
  except FatalError, e:
    print >>msgout, "ecplmdr: fatal: %s" % e
    sys.exit(2)
  except KeyboardInterrupt, e:
    print >>msgout, "\necplmdr: interrupted"
    sys.exit(3)

';exec "$PYTHON" -c "exec __import__(\"os\").getenv(\"PYCODE\")" --argv0="$ARGV0" $CMD "$@"; fi #'
